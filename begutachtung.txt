matrices.h:1:
	Makros, einschließlich include-guards, sollten in
	GROSSBUCHSTABEN abgefasst werden.
makefile:10:
	Ich empfehle "rm -f", damit es nicht fehlschlägt, sollte
	nichts zu löschen sein.
main.c:2-4:
	Ihr könnte mit der Kompileroption "-I pfad" Suchpfade für
	Header einstellen.  Dann müsst ihr nicht immer "../engine"
	schreiben.
main.c:12:
	Statt per scanf() überlegt, ob ihr die Dimensionen aus einem
	Kommandozeilenargument nimmt.  Man kann das Scannen von Zahlen
	mit Fehlerkorrektur sonst besser lösen, indem man erste eine
	Zeile mit fgets() in einen Puffer ließt, und in diesem dann mit
	sscanf() parst.  Das erspart das leeren des Puffers.  Wenigstens
	solltet ihr die Parser-Logik aber in eine eigene Funktion
	abstrahieren, damit ihr sie nicht wiederholen müsst.
main.c:26:
	Dies ist eine Endlosschleife, wenn nie ein Zeilenumbruch kommt,
	z.B. weil das lesen aus der Eingabe mit EOF fehlschlägt.  Diesen
	Fall solltet ihr mindestens prüfen.  Die oben angegebenen
	Alternativansätze vermeiden das Problem auch.
data_structures.c:
	Überlegt, die Invarianten der Datenstrukturoperationen zu
	dokumentieren, damit keine Unklarheit über die Benutzung
	besteht.
data_structures.c:7:
	Bitte überprüft, ob malloc() erfolgreich war.  Das gilt auch für
	queue_init().
data_structures.c:20:
	Die Fehlerbehandlung ist löblich, aber da ihr dann einfach
	weiter macht wird das Programm nachfolgend vmtl. nichts
	sinnvolles mehr tun.  Statt das pushen in einen vollen Stack zu
	ignorieren, brecht lieber das Programm mit abort() ab.  Selbiges
	gilt auch für die Fehlerbehandlung in den anderen Funktionen.
canvas.c:16:
	Bitte hier auch auf korrekte Fehlerbehandlung achten.
algorithms.h:11:
	Bitte keine externen Funktionen in Headern definieren.  Macht
	daraus entweder eine statische (inline) Funktion, oder definiert
	sie in einer .c-Datei.
dijkstra.c:13:
	Überlegt euch, welches Namensschema ihr haben wollt und setzt es
	dann konsistent um.  Also entweder camelCase oder snake_case, aber
	nicht mal so mal so.
dijkstra.c:42:
	Diese Funktion sollte in canvas.c sein.  Ihr könnt sie elegant mit
	memcpy() realisieren.

